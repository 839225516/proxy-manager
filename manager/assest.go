// generated by goassest(0.4 20160225)
// https://github.com/hidu/goassest/

package manager

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"flag"
	"fmt"
	"io/ioutil"
	"mime"
	"net/http"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

// AssestFile assest file  struct
type AssestFile struct {
	Name    string
	Mtime   int64
	Content string
}

// AssestStruct assest files
type AssestStruct struct {
	Files map[string]*AssestFile
}

var _assestDirect bool

func init() {
	exeName := filepath.Base(os.Getenv("_"))
	//only enable with go run
	if exeName == "go" || exeName == "go.exe" {
		flag.BoolVar(&_assestDirect, "assest_direct", false, "for debug,read assest direct")
	}
}

var _assestCwd, _ = os.Getwd()

// GetAssestFile get file by name
func (statics *AssestStruct) GetAssestFile(name string) (*AssestFile, error) {
	name = strings.TrimLeft(path.Clean(name), "/")
	if _assestDirect {
		f, err := os.Open(_assestCwd + string(filepath.Separator) + name)
		if err != nil {
			return nil, err
		}
		defer f.Close()
		info, err := f.Stat()
		if err != nil {
			return nil, err
		}
		if info.Mode().IsRegular() {
			content, err := ioutil.ReadAll(f)
			if err != nil {
				return nil, err
			}
			return &AssestFile{
				Content: string(content),
				Name:    name,
				Mtime:   info.ModTime().Unix(),
			}, nil
		}
		return nil, fmt.Errorf("not file")
	}
	if sf, has := statics.Files[name]; has {
		return sf, nil
	}
	return nil, fmt.Errorf("not exists")
}

// GetContent get content by name
func (statics AssestStruct) GetContent(name string) string {
	s, err := statics.GetAssestFile(name)
	if err != nil {
		return ""
	}
	return s.Content
}

// GetFileNames get all file names
func (statics AssestStruct) GetFileNames(dir string) []string {
	names := make([]string, len(statics.Files))
	for name := range statics.Files {
		names = append(names, name)
	}
	return names
}

// FileHandlerFunc handler http files
func (statics *AssestStruct) FileHandlerFunc(name string) http.HandlerFunc {
	if strings.Contains(name, "private") {
		return http.NotFound
	}
	static, err := statics.GetAssestFile(name)
	return func(w http.ResponseWriter, r *http.Request) {
		if err != nil {
			http.NotFound(w, r)
			return
		}
		modtime := time.Unix(static.Mtime, 0)
		modifiedSince := r.Header.Get("If-Modified-Since")
		if modifiedSince != "" {
			t, err := time.Parse(http.TimeFormat, modifiedSince)
			if err == nil && modtime.Before(t.Add(1*time.Second)) {
				w.Header().Del("Content-Type")
				w.Header().Del("Content-Length")
				w.Header().Set("Last-Modified", modtime.UTC().Format(http.TimeFormat))
				w.WriteHeader(http.StatusNotModified)
				return
			}
		}

		mimeType := mime.TypeByExtension(filepath.Ext(static.Name))
		if mimeType != "" {
			w.Header().Set("Content-Type", mimeType)
		}
		w.Header().Set("Last-Modified", modtime.UTC().Format(http.TimeFormat))
		w.Write([]byte(static.Content))
	}
}

// HTTPHandler handler http request
// eg: http.Handle("/res/",res.Assest.HttpHandler("/res/"))
func (statics *AssestStruct) HTTPHandler(pdir string) http.Handler {
	return &_assestFileServer{sf: statics, pdir: pdir}
}

type _assestFileServer struct {
	sf   *AssestStruct
	pdir string
}

// ServeHTTP ServeHTTP
func (f *_assestFileServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	rname, _ := filepath.Rel(f.pdir, r.URL.Path)
	if filepath.Separator != '/' {
		rname = strings.Replace(rname, string(filepath.Separator), "/", -1)
	}
	f.sf.FileHandlerFunc(rname).ServeHTTP(w, r)
}

func _assestGzipBase64decode(data string) string {
	b, _ := base64.StdEncoding.DecodeString(data)
	gr, _ := gzip.NewReader(bytes.NewBuffer(b))
	bs, _ := ioutil.ReadAll(gr)
	return string(bs)
}

func _assestBase64Decode(data string) string {
	b, _ := base64.StdEncoding.DecodeString(data)
	return string(b)
}

// Assest export assests
var Assest = &AssestStruct{
	Files: map[string]*AssestFile{

		_assestBase64Decode("cmVzL2NvbmYvcG9vbC5jb25m"): &AssestFile{
			Name:    _assestBase64Decode("cmVzL2NvbmYvcG9vbC5jb25m"),
			Mtime:   1442028071,
			Content: _assestGzipBase64decode("H4sIAAAJbogA/1IuKMqvqLTNKCkpsNLXNzQy1zMAQkMrCwMLAwUFZUMQ4OLCpcrEwMCQS0EBJl+cn5xdbApUkZeYm+pQUFyOUGlsZGCgoGwEAlwAAAAA//8BAAD//4vslMF0AAAA"),
		},

		_assestBase64Decode("cmVzL2NvbmYvcHJveHkuY29uZg=="): &AssestFile{
			Name:    _assestBase64Decode("cmVzL2NvbmYvcHJveHkuY29uZg=="),
			Mtime:   1442028071,
			Content: _assestGzipBase64decode("H4sIAAAJbogA/0yRTWsTQRzG7/MpFoqg0G5iDb4MiIeePPSiPQgiYboZksVkZpmdrYZSiNCa2DYmal5qqGJMan1pEwvaRtKS7yI7s5uTX8H/bjwI/8MyzzP7PP/fOFxIAxs3k7eSCM2Fp1u6fQozbf8wVLXpX1SN4PA1knaBci8yXgfXdLwXDvrTcjUcNvVRVze/I0FXRBHkRZD1fkn1D/+Xg8aJGnzUlbPg23Ba6oSTck5Kx8hRkqHCePhgYZmwhXtUiuIjvVtWg87sf8vkKb4KtSAxvqR7Jf1zJ5y89UdfPZHX7w5Upa9bx/64F9Sf672hqn/Sxz01GiGSt9foUo5aj6FUFIYTCdczVzN2IWtavJBwJZG2BWcOFU7ecxMgJCzuFNPCzjKZXkyZDsveScvb65cEYZmNaLE4/1/a/gvdrASdTSA17TRmyBCyosi7TFKxRvL4xmIyGQOpqu0uIAuHz3TrlzqvoTnuSJszF68zzih01O0PM8P8KnFtC8eA4k9jdpImrIj98Vhv1tSormpnG4h4MrdSdCiODQheSeYpRozDZhTPOEVUto7Uq+0/57v88u/KF5gr3DRN9aYCA+38URWgBd0BLBNR8VzV78BN/2ISND6HOye6VZ4PJ+/1ywP0RHCWvR+blniG4lTq2l8AAAD//wEAAP//YF6z00ECAAA="),
		},

		_assestBase64Decode("cmVzL2NvbmYvdXNlcnM="): &AssestFile{
			Name:    _assestBase64Decode("cmVzL2NvbmYvdXNlcnM="),
			Mtime:   1442028071,
			Content: _assestGzipBase64decode("H4sIAAAJbogA/8pLzE21SkzJzcxTKCgutwJihczieLAARJgLoiIpGSwPpAEAAAD//wEAAP//DHUqRjIAAAA="),
		},

		_assestBase64Decode("cmVzL2Nzcy9mbGF0LmNzcw=="): &AssestFile{
			Name:    _assestBase64Decode("cmVzL2Nzcy9mbGF0LmNzcw=="),
			Mtime:   1442028071,
			Content: _assestGzipBase64decode("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"),
		},

		_assestBase64Decode("cmVzL2Nzcy9zdHlsZS5jc3M="): &AssestFile{
			Name:    _assestBase64Decode("cmVzL2Nzcy9zdHlsZS5jc3M="),
			Mtime:   1442028071,
			Content: _assestGzipBase64decode("H4sIAAAJbogA/6RWbY+jNhD+K/RQpTtpQWSTXPeMTuqn/oL2U1UhY5tgrWMjYzZJLf57x8bmJUmvH6rVRuB58cwzz8zwK2mx7plJPv3x+2/Z26cyJ4Jhbf0vqpVpx9acxUut6M2esT5xiYqyw5RyeULFmEr8YRsuDNMIi67Fn1WHCTe379+KL2V4Rvm3ssbk/aTVIClKm6ZZXJSz17XK4fCV1PuSKKG0NxjTM5ODvXBqWvRW/DybJXgwyseRDMJuTleXCN6brDc3wTJz6xiSSrJolAhuG6GwQYI1ZjbaFd21bJQEO/43Q7sDvNZKU6YzzU+tQbvumvRKcJroU40/Fy/uL999Aa1r1reYqovXKeDPa7wejy/xP9+Bovd+Yd7bL0VRGnY1GRb8JBFhEjAd8+nGquG6NzZc78L8/7fH9FPnruqH2gEMWKBWfTBt7wr2Y+0E21CqqXAraEFEed8JfENcCi5ZVgtF3supkkcH8rrKkpmL0u+ZqRNDLbg2nGARQDGqG1Pcc8oCEfZ7IAKX2fR2cN7G/LJ7LYIcnqaTw3xyCCfH+cRbpURJyQikZrAZehtZ8HUbn8G1YLEOcC5w1zMUHyI/esd73x+5qatd0F+VLCWElN5XBsCowaCGXxktIXWa1Zrhd+R/IW8RkNoVQPr7LpronkGfGnVGR5eZuzAhuDNcSftAqK2Hojk0Xx9YGFLPAG3nsmwn0etxboD7TELaIYyQNRR+7sb9HJnRiWlflmc6I73/V/eeNTGKYnHVMkwnh/Y/O2mTONszzFh042ZbcLMy8z3+DK4IzzQEFsxNo5SJbQBhwzGtiMvwSVuDSN+JvD+QVOTR4Cd+7pQ2WHoF/WC2lYu13PXrWlxXtX3Myp3ftucU0MVzQ1bTkK8apc9Jw5mgsDXsFgtX5RSwCCZ2NTx3W5FL3c0NGLsX5Ec1GXQPwHWKe4BS77GCpjQAQCBSZOSdNPGN5Gj1/JzeBVI+mypby07HJnc7jvKPaom9crvkLvozvkaCvhVupLmhFA6mqWR03jMBA4bRDcykAR76y8MOCjRwZVttpTEn652crmOpIL7I4kcKe67BZlw2oF9+CZdujj7Zw8HAbcXnNqOhTqXFvdsDc/8WK5ZtNJJpCC57fga2psXdxp73+5g7pmWuIFoJG7vfjePl62PmYdzLmPKhnzb3wyg5aXxzZdCMqtCmtRgc+qyvINrwiTMX0u+Ocq5zTyAOAYVRjonwxpi06zL7uoe1NHFgk9njEID0f5x9VUwUtssGWARPhlVQeyueczyactkN5k/3GfTdufhr5f5uoby64RYvpLnAQPxJ+VuxFCJ8j/jBDCxx09qupvUCYcspZXL8BwAA//8BAAD//3NXawV0CgAA"),
		},

		_assestBase64Decode("cmVzL3RwbC9hYm91dC5odG1s"): &AssestFile{
			Name:    _assestBase64Decode("cmVzL3RwbC9hYm91dC5odG1s"),
			Mtime:   1444565514,
			Content: _assestGzipBase64decode("H4sIAAAJbogA/4yQwY7TMBCG73kKK5ckEthFwKWb+MCKK0JixbWaONPabRJb9mR3q6oSPCsvgtO4VRGXzWkmnn/m/35Wt17IrHZM9RBCk+uPuYTWTlQLJzNWO/nd29cjG2CEHXp++/1jcs56YvXWjsSU7a1v2n5CqYncn1+/g1WH8OlWwLX6PBcaOvtyaWsx6yVz8xV+f3SPitia1cC0x210FveGtRA7Q3pqubKD0KabxEX5PvnLGYHfITX5pu1hPOTyTbJagLzdfpy8x8j0E30wdlz/j3g68efl8XxOALOazXJmuiYf8WWTJjaht5Rft1/SzlLoqQnKG0cyC0hPZsCYfbmdRkVRXFanjM3fMtN0Vk1D9MaVRyD82uPclcXyXFQP7H6cB6+W3CL/DM1TCMYu+JuIL5RGdeD7kP8jpaPDpiB8JbGHZ0gHrvtvPmLUyUT4cnyC3TcYsCw0QldU3BAO5ari4ByO3aM2fVcui6rs/O7DarWqHiK/uAbwFwAA//8BAAD//2p+MfeNAgAA"),
		},

		_assestBase64Decode("cmVzL3RwbC9hZGQuaHRtbA=="): &AssestFile{
			Name:    _assestBase64Decode("cmVzL3RwbC9hZGQuaHRtbA=="),
			Mtime:   1461390276,
			Content: _assestGzipBase64decode("H4sIAAAJbogA/3xT3W7zKhC891Mgjnru/N82DrWtnnc49xEYnKDPBgSkTRTl3b+F2v1R2l60EcvOMDPrbZ0/T6JP/hm0GuX+f8omgUZt54uhnEu1J2VhTk8ztXupUiv3B09QBaVr0uYLtmU275Ok9RH8Krk/dLgsijuMJO/wJ2YMzd6Gfxy90EnuVYe9NhhFpg5HLHkss+YutLIeNCAlXpGx+nQmbc6gGtQhNAt/0MButPMY0cFLDWQ5AOB09HrQs5mEB1I9jhh5MCB8h+Vod4EgKhEnKAv69fUg/OkgotOqAKcYKTrDddTgcN/mKzCY5vJlxYdyGl2RQSgvLDxyucgRZdL9x2eprhCaVObokT8bALgjmyWoHybqXIeZVwj+UmMl5H3GIaIjtAVPgUlMTgAFQjSQQS6Ch6rigTcHIeApD+bCr+e3Ma+jEicawiFJayzMLxrrIFfl0aAnbTsG7/YH703gU74neV5uq6x83GbNNitJUzTFAgtdcH2DPobQiHGvzwvHSrAtviV4vy6/Xt8QOz38cQ+fhFWbrMgCaQ3j+hV1/wOq/B1Ff4BVP8LcB4IKl5ZVkw4jI4zaUevnD5KmrhuYVZzCMrI87kcedwm+r2Q42om8ja0dNIcaCiWUppx6ivBt8E7YXQh/0dDFr+Xfmz4YzW7ma5DdhrH7pt5UW/ZAG1E9jptalE1dDlw8sOa++oYgmF/h6xSjr2xLavCM0VK9XLLYvDvAsl6v5P1stIVzWFqw/OYONmS0oH5Zuvd9XZeMS2cmeiZKK/EUlvGtvUco+QsAAP//AQAA//9UXKclzAQAAA=="),
		},

		_assestBase64Decode("cmVzL3RwbC9pbmRleC5odG1s"): &AssestFile{
			Name:    _assestBase64Decode("cmVzL3RwbC9pbmRleC5odG1s"),
			Mtime:   1461391223,
			Content: _assestGzipBase64decode("H4sIAAAJbogA/5RWbW/iOBD+TH6Fz+KkVosI9GWvokmkVa97X1bdilLd3afIcdzGaoiztsOLWP77+oUECAGylUri8TzP4xl7JvYi7gaOlweJlDnIOVsswRRl6J3wnkwIIEhQIiSYoyWQDBSCAJTFpYsBqPk/PDc3LKtVP2OSYrJeW5NEUUqAkMuU+HBOY5mMhoPBn1BPcf0TA2P14fXnQb6AYIZS+p75ULIcnsADnCIhlFsUDrUfRrmkLAs8BBJO3nzoColkISCQiL8T6cMwSlH2AQNr91wUeG6JcgDQy/FkUq5meK1XEwjCZypMheHSc2USKL9YR2ksEzo1gSqT+uE7NIHNpGQSpXs4Yw8xKzLZ/4dIAI0LPMmCsKQzcprG+ige0Ehkp0O9yW14jOOxRW1cBMMf4rYVm3Vtw3fTnu+mFR/6DUJ0jlG0IxPHeDj5UehiOnIsxuTHRM+cQYsCH1tHqObOoN8QTUl8lMBO1zgc9aLrMHCMebdqr0yZbM218o3pLHDKKq7VLFB/Vd0CxHFCJcGy4ATsVaaOIWLx0r7bMd8OrCEGnM1FjpT0FdwqhRgGOKUkk3aJdRDALK1QWxCIwiUM9rphM/6oaCxqimUuT0Swi9+242bhXd9N284ZS5s0Ox3PPjp7K76GeyS6s+/onfGuTk3ChFyvR9U4Z1xuTk/JkbE5R7kP7dOGNnLdxWLRV/+j6+HVXSvN+XzejxCNiz5m0xLRFGJd0LafHcnh4G7w2wQ3OwQ3t5//qhGohz2k21rJOQm6BU99uAl5LwIX3js4AT7AyiWkGZUXl/fAMSNBVP3Iiy5OeuDhdfzt+/MkVI8e0HQnvcaPk9fx02T85enl6+O4ByQvyOX9ob8XBSXkefz9v/89Nwp60HtjmdQ1wbgfpQU5v88aEMA2Cq8vj+Pnf/8+IpShKRnlYr5ldF36BjKCiRCIL52uzq5vVMiCYK1RJQKnTBBrUenXaVc9xzW9Z9OZzB5VO+N4AnOay8CZIQ4WoSrxMGP+UKPLGWe1Uvp9Kr7EU5qt12UTq9071B0JxWWfNY/qCnFnWmPGTK+1U0FZYUmjr6rBuGFyeGtuRvVT+Q0J+ZAQ/NEEGTRBgKRS36OmQnVFjXw9Ijiwl5/Nh6Zxcuc74pSdRo9MOjqrFUfZOwFdva+9rgl75NuzI1QyOzZfnYNeVu5MzHAxVW27P+fqq3BR7tGnT5fVFm0KcPMVM0pV5zngVQ5GvK9D/jldPhXTo84Hma7AVcp/ioTt3f9OST6UqW7ja64TLwXW5/7MOuuor2ZLDkC2P61WJIv1Md4UQccpLb8AAAD//wEAAP//5jXgogMMAAA="),
		},

		_assestBase64Decode("cmVzL3RwbC9sYXlvdXQuaHRtbA=="): &AssestFile{
			Name:    _assestBase64Decode("cmVzL3RwbC9sYXlvdXQuaHRtbA=="),
			Mtime:   1442028071,
			Content: _assestGzipBase64decode("H4sIAAAJbogA/5RUMbPbIAze36+gLG9pQrv1ethL26137dClUw4b2eiKIQciebn0/fcCTt5z0vQuZUBI+vRJCNnyzedvn378/P6FGZps+yDPApTOYgJSrDcqRKCGJxpWH/jZ7NQEDd8h7Lc+EGe9dwQuw/aoyTQadtjDqipvGTokVHYVe2Wheb9+d0WjEhkfFiQ67QGvQDH0C4Qh2saPQoxIJnXr3k/CoE5iG/zTYTUpp0YIhYGQLLQXZvabHY/rHYSI3j0/SzFjHqRF94sFsDkZHSxEA5CvZgIMDRcBouhjFINVtM4Hfm9AdZ0jxKm3ndeHLDTuGOqGO7XjC3UCl7LO5iWTrVYLA21i6i69FWGR9VbF2PDOBw1hM2CIxFupztXwFp2GJylUK4XF6/AFUmnN27zdASUoScp+D2/nU0ZX8RdcimRflBdj6cd8r8eAo6HHJb1cRNR1POLA1hi/+hHzu1745mLys6cyTeXRs8puQF7rtX6sBc/y5gVLTrARbia7YEJXidDd5sk0Ti9Zaj/YUs+9aG80hvcWVJ70E+BK/Bv36i+j1enyTeb2lLnMdfwPzTybftzk86KO04SL+k/5AwAA//8BAAD//4RFJ3pqBAAA"),
		},

		_assestBase64Decode("cmVzL3RwbC9sb2dpbi5odG1s"): &AssestFile{
			Name:    _assestBase64Decode("cmVzL3RwbC9sb2dpbi5odG1s"),
			Mtime:   1442028071,
			Content: _assestGzipBase64decode("H4sIAAAJbogA/6SSsW7DIBCGdz/F6fbInVvbUoduHfoGFTYXBwkDPc5J/fY9EidK2rRLLRkj+Pj58NFYtwdnW+ztA3ZV03Pd3WuqIzh4k3OLPo4ubPLARKEs2kaeYCLZRQ1KMQuCGcTF0GJ9ZBHE8EjSotvye8GPyxx5m0m062mkYLtnO7kAr2VJU69jFZyfnwprEsBdpsxuRo5zumWUciHNArIkalHoU4WDmbRfWoTkzUC76C1xiy9BiGGJM8Npdm/8rCjebDPEIBw9AtPH7JjsrVWtWl31T9Gk8CGyRVhtUz58k327IH9a3pP7bdc895OTS6AWB0pB19heAui7Sewmw8t18prb1Fd1rotG+Z7+xxnRW6EHWk91uSKQZfE6YF3WQy6PIQZ6wq6pT3gH8AUAAP//AQAA//8TaBfOvgIAAA=="),
		},

		_assestBase64Decode("cmVzL3RwbC90ZXN0Lmh0bWw="): &AssestFile{
			Name:    _assestBase64Decode("cmVzL3RwbC90ZXN0Lmh0bWw="),
			Mtime:   1442028071,
			Content: _assestGzipBase64decode("H4sIAAAJbogA/4xS3Y6bPBC95yksf9qbTw1kU7VKEaC+SWRgFltrbNceL0FR3r1jfqLddi96gYTn58w5Z6YKOGtosv8QAl5erB8ZyhvCFQ9Cq8GUzKtB4j2riq0yq1rfZFWv3linRQg1l99547y9ziyBlFVBOapYwEZAafuaOxuQM9GhsqbmRSrkTFHiMZczFH4ArPml1cK8coJA0Wpgk+pR1vx8fFpiaTrKPfrj6K68qYIThi0Ma95ZbX3poefN/0SbMk30mnihTK19UynjIjKcHVVTijMjRvq93XJ6XdLjfuc73DKoPH974rvgRPfQWYPeUq+HX1HRNCYi2hfbxcCcFh1Iq3vwZA+iK4timqYcrmJ0GvLOjsS5SFSKVc8qarXxH5gudX8wPJ2TFZ9z/EAIhnLjFBNa6cL08/mYH/NTfiq/np7Pyea/DR28mHkzSTAMRofzlxiArXtXhjlr9WZ29pmyh6Yd9N2NdWAQPP+oNsR2VHQkb0JHWO/kIa5Fw+g7OK9G4efNy2wbWSxnQz/v4aTqezC7f2hf02PDpr0vAVp6ak/WNdlvAAAA//8BAAD//4YZ9JYaAwAA"),
		},

		_assestBase64Decode("cmVzL3ZlcnNpb24="): &AssestFile{
			Name:    _assestBase64Decode("cmVzL3ZlcnNpb24="),
			Mtime:   1463221890,
			Content: _assestGzipBase64decode("H4sIAAAJbogA/zLQM9IzBgAAAP//AQAA//9Szta0BQAAAA=="),
		},
	},
}

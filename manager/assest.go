// generated by goassest(0.5.3 20161126)
// https://github.com/hidu/goassest/

package manager

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"flag"
	"fmt"
	"io/ioutil"
	"mime"
	"net/http"
	"os"
	"path"
	"path/filepath"
	"runtime"
	"strings"
	"time"
)

// AssestFile assest file  struct
type AssestFile struct {
	Name    string
	Mtime   int64
	Content string
}

// AssestStruct assest files
type AssestStruct struct {
	Files map[string]*AssestFile
}

var _assestDirect bool

func init() {
	exeName := filepath.Base(os.Getenv("_"))
	//only enable with go run
	if exeName == "go" || (runtime.GOOS == "windows" && strings.Contains(os.Args[0], "go-build")) {
		flag.BoolVar(&_assestDirect, "assest_direct", false, "for debug,read assest direct")
	}
}

var _assestCwd, _ = os.Getwd()

// GetAssestFile get file by name
func (statics *AssestStruct) GetAssestFile(name string) (*AssestFile, error) {
	name = filepath.ToSlash(name)
	if name != "" && name[0] != '/' {
		name = "/" + name
	}
	if _assestDirect {
		f, err := os.Open(filepath.Join(_assestCwd, name))
		if err != nil {
			return nil, err
		}
		defer f.Close()
		info, err := f.Stat()
		if err != nil {
			return nil, err
		}
		if info.Mode().IsRegular() {
			content, err := ioutil.ReadAll(f)
			if err != nil {
				return nil, err
			}
			return &AssestFile{
				Content: string(content),
				Name:    name,
				Mtime:   info.ModTime().Unix(),
			}, nil
		}
		return nil, fmt.Errorf("not file")
	}
	if sf, has := statics.Files[name]; has {
		return sf, nil
	}
	return nil, fmt.Errorf("not exists")
}

// GetContent get content by name
func (statics AssestStruct) GetContent(name string) string {
	s, err := statics.GetAssestFile(name)
	if err != nil {
		return ""
	}
	return s.Content
}

// GetFileNames get all file names
func (statics AssestStruct) GetFileNames(dir string) []string {
	if dir == "" {
		dir = "/"
	}
	names := make([]string, len(statics.Files))
	dirRaw := dir
	dir = path.Clean(dir)

	if dir != "/" && strings.HasSuffix(dirRaw, "/") {
		dir += string(filepath.Separator)
	}

	dir = filepath.ToSlash(dir)

	for name := range statics.Files {
		if strings.HasPrefix(name, dir) {
			names = append(names, name)
		}
	}
	return names
}

// FileHandlerFunc handler http files
func (statics *AssestStruct) FileHandlerFunc(name string) http.HandlerFunc {
	if strings.Contains(name, "private") {
		return http.NotFound
	}
	name = filepath.ToSlash(name)
	static, err := statics.GetAssestFile(name)
	return func(w http.ResponseWriter, r *http.Request) {
		if err != nil {
			http.NotFound(w, r)
			return
		}
		modtime := time.Unix(static.Mtime, 0)
		modifiedSince := r.Header.Get("If-Modified-Since")
		if modifiedSince != "" {
			t, err := time.Parse(http.TimeFormat, modifiedSince)
			if err == nil && modtime.Before(t.Add(1*time.Second)) {
				w.Header().Del("Content-Type")
				w.Header().Del("Content-Length")
				w.Header().Set("Last-Modified", modtime.UTC().Format(http.TimeFormat))
				w.WriteHeader(http.StatusNotModified)
				return
			}
		}

		mimeType := mime.TypeByExtension(filepath.Ext(static.Name))
		if mimeType != "" {
			w.Header().Set("Content-Type", mimeType)
		}
		w.Header().Set("Last-Modified", modtime.UTC().Format(http.TimeFormat))
		w.Write([]byte(static.Content))
	}
}

// HTTPHandler handler http request
//eg:on file system is :/res/js/a.js and request is /res/js/a.js
//http.Handle("/res/",res.Assest.HttpHandler("/"))

//eg:on file system is :/res/js/a.js and request is /js/a.js
//http.Handle("/js/",res.Assest.HttpHandler("/res/"))
func (statics *AssestStruct) HTTPHandler(baseDir string) http.Handler {
	return &_assestFileServer{sf: statics, pdir: baseDir}
}

type _assestFileServer struct {
	sf   *AssestStruct
	pdir string
}

// ServeHTTP ServeHTTP
func (f *_assestFileServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	rname := filepath.ToSlash(filepath.Join(f.pdir, r.URL.Path))
	f.sf.FileHandlerFunc(rname).ServeHTTP(w, r)
}

func _assestGzipBase64decode(data string) string {
	b, _ := base64.StdEncoding.DecodeString(data)
	gr, _ := gzip.NewReader(bytes.NewBuffer(b))
	bs, _ := ioutil.ReadAll(gr)
	return string(bs)
}

func _assestBase64Decode(data string) string {
	b, _ := base64.StdEncoding.DecodeString(data)
	return string(b)
}

// Assest export assests
var Assest = &AssestStruct{
	Files: map[string]*AssestFile{

		_assestBase64Decode("L3Jlcy9jb25mL3Bvb2wuY29uZg=="): &AssestFile{
			Name:    _assestBase64Decode("L3Jlcy9jb25mL3Bvb2wuY29uZg=="),
			Mtime:   1442028071,
			Content: _assestGzipBase64decode("H4sIAAAJbogA/1IuKMqvqLTNKCkpsNLXNzQy1zPQM9AztLIwsDBQUFA2BAEuLlyqTAwMDLkUFGDyxfnJ2cWmVvr6eYm5qQ4FxeUIlcZGBgYKykYgwAUAAAD//wEAAP//i+yUwXQAAAA="),
		},

		_assestBase64Decode("L3Jlcy9jb25mL3Byb3h5LmNvbmY="): &AssestFile{
			Name:    _assestBase64Decode("L3Jlcy9jb25mL3Byb3h5LmNvbmY="),
			Mtime:   1442028071,
			Content: _assestGzipBase64decode("H4sIAAAJbogA/0yQTWsTTxyA7/MpBsIf/kK7G2vwZUA89OShF+1BEAnbzZAsJjPL7Gw1lEKE1KxtY6LNS12qGJNaW5vEQk1X0pLvUnZmd09+BdmNB2/DzDO/h99jUsYhgnfT99IApMLJluxOZHcSdc+hqLf9qzoMjt4DbpQwtWPwNgCpaLofjgZRrR6O2/K0J9s/AMOrrAwRXAIgJQ8qYnD073PQOhOjL9K5CL6Po4obzmoFzk1YwFoOM/j0yeKKRhYfYc7Kz+RuTYzc+bwV7SW6mQaxMfkk+xX5cyecffC9E5sV5cdD4QxkZ+hP+0Hztdwfi+ZXOewLzwNa0VjHywWsP4cIxjKkqpatrOWMUl7RaUm1uMYNXbVsEzOzaFuqUcqrOjXLWWbkCc8uZRST5B9k+f2N/5hGcpvxYon/r+3gjWw7gVuNuueR25onA0CPlQ8Jx2xdK6I7S+l0EqQutnvhaBCOX8nOL3HZAClqcoMSC20QSjBEUHY/z4GFNc0ydJQESo5wfpPVSBn506msNoTXFI2LTaDZvLBaNjFKAAC4wYsYAUK5oWM07xRX2ToV77Z/X+7S/6+d42vn+AZVFEXsOWLPASDle3U57Ae9UeBW4yq2JQau7534V7Og9S3cOZOd2kI4+yTfHoIXjJL84wRapjmMMplbfwAAAP//AQAA//9gXrPTQQIAAA=="),
		},

		_assestBase64Decode("L3Jlcy9jb25mL3VzZXJz"): &AssestFile{
			Name:    _assestBase64Decode("L3Jlcy9jb25mL3VzZXJz"),
			Mtime:   1442028071,
			Content: _assestGzipBase64decode("H4sIAAAJbogA/8pLzE21SkzJzcxTKCgutyooLlfILI4HC0CEuSAqkpLB8olJyQAAAAD//wEAAP//DHUqRjIAAAA="),
		},

		_assestBase64Decode("L3Jlcy9jc3MvZmxhdC5jc3M="): &AssestFile{
			Name:    _assestBase64Decode("L3Jlcy9jc3MvZmxhdC5jc3M="),
			Mtime:   1442028071,
			Content: _assestGzipBase64decode("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"),
		},

		_assestBase64Decode("L3Jlcy9jc3Mvc3R5bGUuY3Nz"): &AssestFile{
			Name:    _assestBase64Decode("L3Jlcy9jc3Mvc3R5bGUuY3Nz"),
			Mtime:   1442028071,
			Content: _assestGzipBase64decode("H4sIAAAJbogA/6RW3W7jNhN9FX0rBNgAkSDFdr5EwgK96hO0V0UhUOTIIkKTAjmK7RJ694IU9We724siiCCTnOH8nDlHv9CWaAMYffv9t1+T929lSgUQbf2zqBW2Q4sn8VIrdrUnoo9cFlnZEca4PBbZEEvyZRsuEHRBRNeS76ojlOP1x0f2XIb3Iv0oa0I/j1r1khVx0zSLi3L2uj6y37/ReldSJZT2BkN8AtnbM2fYFu/Z02wWkR6VjyPqhd2sri4R3GBi8CogwWsHhVQSJqNIcNsIRbAQ0OBslGfdpWyUxMTwv6DI992lrJVmoBPNjy0WeXeJjBKcRfpYk+/Zi/tL8+eyVpfEtISpsz+TRdl44vVweJn+0zx/Hr2fwXv7f5aVCBdMiOBHWVCQCHpIxxurhmuDNlzvwvzvt0/px85dZfraFTgSvGjVF2h707Cfn46IDa0aG7cqbUQs46YT5FpwKbiEpBaKfpZjJw+uyOsuS8Cz0p8J1hEy+wUaOSUiFAVVN8TEcAYBCLvdU3niMhl/7Z23IT3nr1nYz1/Dyn5e2YeVw7zirWKqpASKlUGCvbETCt628SGpBUx9oEoI0hkoppcJH8bh3s9HinWVh/OrlsWU0tL7SgS5qh6Lhl+AlWelWVJrIJ+FfyZEiFCpPMue7qZohHtSK0R1Kg4uM3dhREmHXEl7B6ith6zZN293KAypJ6g657Jsx63XwzwAt5mEtEMYIeuILNO4myNDHWH7sryzudK7f3TvUTNFkS2uWiBsdGj/dZI2icMOCMDkxnFbcLMy8zP+qFxTeUYSWGqOjVI4jQGldEiRVdRl+GCskVX6Zsv7G1Ks6L3B//ipUxqJ9Af0ndl2X6z33byut+uqtvdZufXrdp0BYWQeyGok+apR+hQ1HAQzgHZbC9flGOsqmNgVeebbLZe6441GqHPhqZr22ihddIr7AsXeY0WVRJAYgDQh8mY38oPkYPV4nd0EUj5ila1lp6chdxrH+Fe1xF45LbmJ/kQuE0DfM0dpjpTCwshKqFMDAigC25SZNjCk/vKgQQEGrm0rVRpSutbkeB1LxfjXhOJ7CHus9cIuCujFL+LS8egDHQ4GThUf2wzI3JGWGKcD8/xmK5RtTkQjCS46Pxe2ZtmNYs/6PqQOaYlriFbCTtPv6Hj5+phxOOkyYbw3o3LfUclRk6trgwamwpjWonfVB1Mhq8InztxIrx3l3GdDtRJiSIVySDRUA0i7brPve5ClEQObzO5JIK7Zz7OvshHCdlGAZeMBWYVj79ljjE+mXHY9/uE+g344F3+u3N8Iyqsjt+lClgpiMBz+yJZGhO8RT8xKgmNru2LrpYQtZwzk8DcAAAD//wEAAP//c1drBXQKAAA="),
		},

		_assestBase64Decode("L3Jlcy90cGwvYWJvdXQuaHRtbA=="): &AssestFile{
			Name:    _assestBase64Decode("L3Jlcy90cGwvYWJvdXQuaHRtbA=="),
			Mtime:   1444565514,
			Content: _assestGzipBase64decode("H4sIAAAJbogA/4xQQYvbPBC9+1cIX2zD90kpbS9ZWYcuvZZCl17DWJ5YSmxJSKPdDSHQ/tb+keLYCVt6qU4zmnnvzXtMdlGoQgamR0ipLc37UkHnM0kRVMFkUF+jfz2xCRwMGPn9+1sOwUdicu8dMe1HH9tuzKgMUfj142fy+pg+3Au4VR/nwkDvX66tFDNesTCr8LeiB9TEtkwCMxH3bTnzpq0QgyWTO679JIzts7gi/1/vKxlBHJDacteN4I6l+ieYFKDu2o85RnTEvmNM1rvt3xbPZ/68DC+X1cCMZjOc2b4tHb7s1o1dGj2VN/Zr2sUa+tokHW0gVSSkJzuhz1Tvs9Nkvaubc8Hmt+y0vdd5QkdcRwTCzyPOXV0t46p5YG/XeYp6yW0rrqb5GoL1i/3dBE5og/rID6n8A0qngG1F+EriAM+wCtz473cMSOsR6dPpCYYvMGFdGYS+arglnOpNwyEEdP2jsWNfL0RNcfnv3WazaR6KQopbAL8BAAD//wEAAP//an4x940CAAA="),
		},

		_assestBase64Decode("L3Jlcy90cGwvYWRkLmh0bWw="): &AssestFile{
			Name:    _assestBase64Decode("L3Jlcy90cGwvYWRkLmh0bWw="),
			Mtime:   1461390276,
			Content: _assestGzipBase64decode("H4sIAAAJbogA/3yT3W7iMBCF7/0UllfdO+IktCW4dtR9h71HTjwBaxPbsk0Bobz7ymnSH9H2BsRkzsecmRwe4qWHGv1qren0/q9sesCd9cPVSaW02bMid+enQfq9Niuv94fIcJm784g4nbW88bRGiMdJfNIqHgQp8vyOYK0E+UAmNeLRpw+FX2Sv90aQaB3BE0mQScsei6y6S61NLZXCBk7YeXu+ME6bGvE0HcYDxINVgjgbIsGyjdoaQahUimB5jLa1g+shgiC26wiO0u8hCqI7v0uAaRI4R+lBfv73NPjTASanZZ67M8FGDiDINEMgNaeLMJlW+mXRp/JqcsVaMBE8qdH1qjuc6fBHDdqMI+LauGPE8eJAkHBsBh0JbnsZgiBNNLiJZuW8HqS/kLSiIwiSPCUS9AHGEWEsEwwbAJWqRiUuVfqlRpwmc+k7qts1L6eCs0zLYYg7DzWajAneWRNxa3vrRdMfoT7E6BLPxJpRWmzLrHjcZtU2K1iVV/ksS12M0hv1MS2NuXB6nhkLYJt/CXh7XHx+fAMOtv0XHj4MVm6yPEvQdZn/rLr/RlX8rJLfyMpvZeFdISGsirJatV3DGuk7a5/fIdV6XSFOpyvMJ6NTPuiUpRoh1B59z17PxluroEY4lfBqpWSUmNwuPoDfpeXPM4jpbfl90+fCaTeoZZFi0zT31XpTbpsHWUH52G3WUFTrolXw0FT35ReAZH6RL1ecfGVbti7KiuC5er1mU/PuYEMcR/b221kfxzGFFnH66g5x3Xk5wBy6t7wuIVM6uF5emLEGnlIYX9trjNF/AAAA//8BAAD//1RcpyXMBAAA"),
		},

		_assestBase64Decode("L3Jlcy90cGwvaW5kZXguaHRtbA=="): &AssestFile{
			Name:    _assestBase64Decode("L3Jlcy90cGwvaW5kZXguaHRtbA=="),
			Mtime:   1461391223,
			Content: _assestGzipBase64decode("H4sIAAAJbogA/5RWXU/jOBe+bn6FX4tXAk3VtHzMopJYGrHM3iAGFdDuXkWuY4hFamfsE9qq0/++sp2kbejX3FB8fJ7nfJ84GuuQBFFBMoACFVrN5mhCJX3jugsZR5wawQ2gKZ0jUKg0HFGZ1ioOILj5XxQWjmWx6EkFgvHl0ouAjnOODMxzHuOpSCEbDvr9/2N7pe2fFDlpjC++9osZRh80F28yxqAKvAePWE6NiTGMk4HVY7QAoSSJKMo0f41xaIBCaTACqt84xDgZ51S+Y+LlUUhJFNaoACHrTgRZ7c3gwnpDDNcfXCMDVEMUQkZQBKmN0kmexcQFCimJQhtOQ0N8JkEBzTdwTp4wVUro/cUBYaeC97JQBuKD76fxOni5RFuJ/HVii3wMj1Pc5VSlYhR7N1dHsXnVY/guj+e7PIqP/gYhPcRojiMzu3g0/1naYdrRFiP+89neHECbku3yIzElO4B+pSLn6U4Cf93iCKLQzSEJnHh9as/dmKzErfFNxQcJ6iluzSxCCDVzi6hmmQDOoNQcbUymjWGs0rn/35/16uAFKdJqagoqY3yOV5YShgnLBZfgXWyDEFN5g1qB0DiZY7KxDbfjdxpNTctincs9EazjV+t4u+F13WptF0rl22x2OpH/6Wx4fIE3SOxmX7N3QLvpmkwZWC6HzblQGqruqTmkmmpaxNj/+tCGYTibzXqz2Wx4MTi/PsrmdDrtjalIyx5TkxqxLcS2Qb9+1kwO+tf93ya4XCO4vPr6R4sgCqsmXc1KoTk5KXUe4yrkjQhCfBOwDMWIlTpPhBRwenaDAncyHFQBpycs66Lbl9H9j8fn5GV030WWbq/W6O75ZfTwPPr28PT9btRFoEt+dvNZPxqTGvI4+vHPv1E4Jl0cvSoJdiaUjsd5yQ/X2QIIPsbCy9Pd6PHvP3cYknTCh4WZrhjDULwiyRk3hup5cGKzGzsrfMaZtdEkguXKcC8JotCmPQii0O2eajO5GjWVCSLDtCiABB9Uo1kyoTKRKh5YdH0TLBbiFfWE+ZZOhFwu6yXWendAxmla71n30zwhrt1qlMrtWn9F6gnLtuqWptrMm5eDK/cyanflPTVwm3H2vg3S3wZBIMC+oyYGE2aRLzsM9v3jp/rQbL1c+44E9aaxJ5eOzmKhqXzj6MTWtXviwh7GvnfMchl0fL46n3ZZXZlUsXLCJfSmWgA/rWv05ctZU6JqAKuvmLPUbJ5PvIuFd6JnQ/41mT+Uk53KnzLdgJuU/zKZ2nj/7TN5W6f6GF33nHgqme37A362Ud9dST6B/H5aLLhMbRtXQ9AJasl/AAAA//8BAAD//+Y14KIDDAAA"),
		},

		_assestBase64Decode("L3Jlcy90cGwvbGF5b3V0Lmh0bWw="): &AssestFile{
			Name:    _assestBase64Decode("L3Jlcy90cGwvbGF5b3V0Lmh0bWw="),
			Mtime:   1442028071,
			Content: _assestGzipBase64decode("H4sIAAAJbogA/5RUQa/TMAy+71eEXN6FNXBDKM0FuCHBgQunKW3c1iJNpsTp3lT631HT7b1uFGnkUMv258+O+7Xyzedvn378/P6FddRbtZNXA9qoneyBNKs7HSJQyRM1+w/8Gna6h5IPCKejD8RZ7R2Bo5Kf0FBXGhiwhn123jJ0SKjtPtbaQvm+eHdHoxN1PqxITDoB3oFiqFeIjugYPwrRInWpKmrfiw5NEsfgn8/7XjvdQpgZCMmCugmz32wciwFCRO+mSYoFs5MW3S8WwJY80tlC7ACIsy5AU3IRIIo6RtFYTUUdI3+0IKeuFeKy28qbs9pJgwNDU3KnB75ye3CJqx1bjkw2Ry00dIipus1mhEVWWx1jySsfDIRDgyESV1Jfp+EKnYFnKbSSwuJ9+QqpjeFKG/MAlGBuMj8f4a18Iq6y+QsuRbIvzktw3sdyr6eAbUdPa3q5qshnHLFhBcavvkU3TTe5ZZhxLNKspvmlW1RsA/I6r/VtHnixmxece4KNsNnshgldJkK3zTOO4MyaJe+DrX2Dg9pYDK8t6MDVBXBn/o17zc/Sqsz8TY5jMetymv6LZtGmbw8Gh9UcF4WL/E/5AwAA//8BAAD//4RFJ3pqBAAA"),
		},

		_assestBase64Decode("L3Jlcy90cGwvbG9naW4uaHRtbA=="): &AssestFile{
			Name:    _assestBase64Decode("L3Jlcy90cGwvbG9naW4uaHRtbA=="),
			Mtime:   1442028071,
			Content: _assestGzipBase64decode("H4sIAAAJbogA/6SSzW6rQAxG9zyF5X3EXd8ySF10l0XfoBoYh1iav3pMUt6+moRESZt2UxaDhI8/HzCd4wOwMzi4f9g33SBt/+hoTuDobSkGfZo4bsooRLE27ZIECKT75AzmVBTBjsopGmxPLIJamUgN8k7eKn5qY/KukPZN52mi6PpnFzjCtrZ07fqsgcv1XWFNAnjI1OpmkjTnewag45hnBV0yGVT6UIRoAxmsJ0L2dqR98o7E4EtUEljSLHCuHqyfySDejRlTVEkeQeh9ZiF3b9U6PvTNH0WzLeWYxCGstrkcv8i+XpFfLR/J/TS1zENgvQZu0wR1oWvsoBEGjZssHKwst8lrbtfe7LmtGvV+/h4XhHdiA61vdf1FoOjiyaDjkr1d/scU6Qn7rj3jPcAnAAAA//8BAAD//xNoF86+AgAA"),
		},

		_assestBase64Decode("L3Jlcy90cGwvdGVzdC5odG1s"): &AssestFile{
			Name:    _assestBase64Decode("L3Jlcy90cGwvdGVzdC5odG1s"),
			Mtime:   1442028071,
			Content: _assestGzipBase64decode("H4sIAAAJbogA/4ySwY7bIBCG734KNNVeqsZkU7VKLYz6JhE2swEtBoqHOFaUd69wnKhp99DjjMf//P/HiJFmh7L6RDjS4S2kgZG5EJ5po5w9+oYlezR0rQRfJyvRJVkJbU+sd2ocWzDfQcYUzjMrIo3g2p5kJRaxAckE3UIMIwFTPdngW+BlEJjVLTz2AiOVjkgtHDqn/DvISpDqHLLJajIt7LcvS69sJ3Pv/tjGM0gxRuXZ4rCFPriQmoQa5GfByxeZk2sEJ1N+1VJYHzMxmiO2kJMD5tWALVwudU7uUIrrFe5yy6Jm/+0F7oGL3U0fPKXggCX8lW1CzVSm8Bb6PLLoVI8mOI2pBUMUG86naarxrIbosO7DAFLwYoXf8txC3TD+h9Nl7i+Hu31B8bHHJ0N4bFZPuag1cZx+vm7rbb2rd83X3eu+YP4X6DGpGeRk0DMcIs1f8ojs9u7WsxiCW2FXHyV7ZLqL/nFjPXrCBM9px9wNloCdlMt4u5NHuI4868hvYrKDSvPKslpX8uVsZPUkZ6zW6O/8KLyXYtW+XOqlcb2W5Lygk9VvAAAA//8BAAD//4YZ9JYaAwAA"),
		},

		_assestBase64Decode("L3Jlcy92ZXJzaW9u"): &AssestFile{
			Name:    _assestBase64Decode("L3Jlcy92ZXJzaW9u"),
			Mtime:   1463221890,
			Content: _assestGzipBase64decode("H4sIAAAJbogA/zLQM9IzBgAAAP//AQAA//9Szta0BQAAAA=="),
		},
	},
}
